package com.xiaomai.zhuangba;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xiaomai.zhuangba.data.bean.db.ShopAuxiliaryMaterialsDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP_AUXILIARY_MATERIALS_DB".
*/
public class ShopAuxiliaryMaterialsDBDao extends AbstractDao<ShopAuxiliaryMaterialsDB, Long> {

    public static final String TABLENAME = "SHOP_AUXILIARY_MATERIALS_DB";

    /**
     * Properties of entity ShopAuxiliaryMaterialsDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property SlottingId = new Property(1, Long.class, "slottingId", false, "SLOTTING_ID");
        public final static Property SlottingSlottingId = new Property(2, int.class, "slottingSlottingId", false, "SLOTTING_SLOTTING_ID");
        public final static Property SlottingStartLength = new Property(3, String.class, "slottingStartLength", false, "SLOTTING_START_LENGTH");
        public final static Property SlottingEndLength = new Property(4, String.class, "slottingEndLength", false, "SLOTTING_END_LENGTH");
        public final static Property SlottingSlottingPrice = new Property(5, double.class, "slottingSlottingPrice", false, "SLOTTING_SLOTTING_PRICE");
        public final static Property MaterialsId = new Property(6, Long.class, "materialsId", false, "MATERIALS_ID");
        public final static Property MaterialsSlottingId = new Property(7, int.class, "materialsSlottingId", false, "MATERIALS_SLOTTING_ID");
        public final static Property MaterialsStartLength = new Property(8, String.class, "materialsStartLength", false, "MATERIALS_START_LENGTH");
        public final static Property MaterialsEndLength = new Property(9, String.class, "materialsEndLength", false, "MATERIALS_END_LENGTH");
        public final static Property MaterialsSlottingPrice = new Property(10, double.class, "materialsSlottingPrice", false, "MATERIALS_SLOTTING_PRICE");
        public final static Property DebuggingId = new Property(11, int.class, "debuggingId", false, "DEBUGGING_ID");
        public final static Property DebuggingPrice = new Property(12, double.class, "debuggingPrice", false, "DEBUGGING_PRICE");
    }


    public ShopAuxiliaryMaterialsDBDao(DaoConfig config) {
        super(config);
    }
    
    public ShopAuxiliaryMaterialsDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP_AUXILIARY_MATERIALS_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"SLOTTING_ID\" INTEGER," + // 1: slottingId
                "\"SLOTTING_SLOTTING_ID\" INTEGER NOT NULL ," + // 2: slottingSlottingId
                "\"SLOTTING_START_LENGTH\" TEXT," + // 3: slottingStartLength
                "\"SLOTTING_END_LENGTH\" TEXT," + // 4: slottingEndLength
                "\"SLOTTING_SLOTTING_PRICE\" REAL NOT NULL ," + // 5: slottingSlottingPrice
                "\"MATERIALS_ID\" INTEGER," + // 6: materialsId
                "\"MATERIALS_SLOTTING_ID\" INTEGER NOT NULL ," + // 7: materialsSlottingId
                "\"MATERIALS_START_LENGTH\" TEXT," + // 8: materialsStartLength
                "\"MATERIALS_END_LENGTH\" TEXT," + // 9: materialsEndLength
                "\"MATERIALS_SLOTTING_PRICE\" REAL NOT NULL ," + // 10: materialsSlottingPrice
                "\"DEBUGGING_ID\" INTEGER NOT NULL ," + // 11: debuggingId
                "\"DEBUGGING_PRICE\" REAL NOT NULL );"); // 12: debuggingPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP_AUXILIARY_MATERIALS_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShopAuxiliaryMaterialsDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long slottingId = entity.getSlottingId();
        if (slottingId != null) {
            stmt.bindLong(2, slottingId);
        }
        stmt.bindLong(3, entity.getSlottingSlottingId());
 
        String slottingStartLength = entity.getSlottingStartLength();
        if (slottingStartLength != null) {
            stmt.bindString(4, slottingStartLength);
        }
 
        String slottingEndLength = entity.getSlottingEndLength();
        if (slottingEndLength != null) {
            stmt.bindString(5, slottingEndLength);
        }
        stmt.bindDouble(6, entity.getSlottingSlottingPrice());
 
        Long materialsId = entity.getMaterialsId();
        if (materialsId != null) {
            stmt.bindLong(7, materialsId);
        }
        stmt.bindLong(8, entity.getMaterialsSlottingId());
 
        String materialsStartLength = entity.getMaterialsStartLength();
        if (materialsStartLength != null) {
            stmt.bindString(9, materialsStartLength);
        }
 
        String materialsEndLength = entity.getMaterialsEndLength();
        if (materialsEndLength != null) {
            stmt.bindString(10, materialsEndLength);
        }
        stmt.bindDouble(11, entity.getMaterialsSlottingPrice());
        stmt.bindLong(12, entity.getDebuggingId());
        stmt.bindDouble(13, entity.getDebuggingPrice());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShopAuxiliaryMaterialsDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long slottingId = entity.getSlottingId();
        if (slottingId != null) {
            stmt.bindLong(2, slottingId);
        }
        stmt.bindLong(3, entity.getSlottingSlottingId());
 
        String slottingStartLength = entity.getSlottingStartLength();
        if (slottingStartLength != null) {
            stmt.bindString(4, slottingStartLength);
        }
 
        String slottingEndLength = entity.getSlottingEndLength();
        if (slottingEndLength != null) {
            stmt.bindString(5, slottingEndLength);
        }
        stmt.bindDouble(6, entity.getSlottingSlottingPrice());
 
        Long materialsId = entity.getMaterialsId();
        if (materialsId != null) {
            stmt.bindLong(7, materialsId);
        }
        stmt.bindLong(8, entity.getMaterialsSlottingId());
 
        String materialsStartLength = entity.getMaterialsStartLength();
        if (materialsStartLength != null) {
            stmt.bindString(9, materialsStartLength);
        }
 
        String materialsEndLength = entity.getMaterialsEndLength();
        if (materialsEndLength != null) {
            stmt.bindString(10, materialsEndLength);
        }
        stmt.bindDouble(11, entity.getMaterialsSlottingPrice());
        stmt.bindLong(12, entity.getDebuggingId());
        stmt.bindDouble(13, entity.getDebuggingPrice());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ShopAuxiliaryMaterialsDB readEntity(Cursor cursor, int offset) {
        ShopAuxiliaryMaterialsDB entity = new ShopAuxiliaryMaterialsDB( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // slottingId
            cursor.getInt(offset + 2), // slottingSlottingId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // slottingStartLength
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // slottingEndLength
            cursor.getDouble(offset + 5), // slottingSlottingPrice
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // materialsId
            cursor.getInt(offset + 7), // materialsSlottingId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // materialsStartLength
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // materialsEndLength
            cursor.getDouble(offset + 10), // materialsSlottingPrice
            cursor.getInt(offset + 11), // debuggingId
            cursor.getDouble(offset + 12) // debuggingPrice
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShopAuxiliaryMaterialsDB entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setSlottingId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSlottingSlottingId(cursor.getInt(offset + 2));
        entity.setSlottingStartLength(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSlottingEndLength(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSlottingSlottingPrice(cursor.getDouble(offset + 5));
        entity.setMaterialsId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setMaterialsSlottingId(cursor.getInt(offset + 7));
        entity.setMaterialsStartLength(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMaterialsEndLength(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMaterialsSlottingPrice(cursor.getDouble(offset + 10));
        entity.setDebuggingId(cursor.getInt(offset + 11));
        entity.setDebuggingPrice(cursor.getDouble(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShopAuxiliaryMaterialsDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShopAuxiliaryMaterialsDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShopAuxiliaryMaterialsDB entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
