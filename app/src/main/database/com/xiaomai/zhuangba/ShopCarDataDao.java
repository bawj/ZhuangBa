package com.xiaomai.zhuangba;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xiaomai.zhuangba.data.bean.ShopCarData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP_CAR_DATA".
*/
public class ShopCarDataDao extends AbstractDao<ShopCarData, Long> {

    public static final String TABLENAME = "SHOP_CAR_DATA";

    /**
     * Properties of entity ShopCarData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Money = new Property(1, String.class, "money", false, "MONEY");
        public final static Property Money2 = new Property(2, String.class, "money2", false, "MONEY2");
        public final static Property Money3 = new Property(3, String.class, "money3", false, "MONEY3");
        public final static Property Text = new Property(4, String.class, "text", false, "TEXT");
        public final static Property Icon = new Property(5, String.class, "icon", false, "ICON");
        public final static Property Number = new Property(6, String.class, "number", false, "NUMBER");
        public final static Property ServiceId = new Property(7, String.class, "serviceId", false, "SERVICE_ID");
        public final static Property ParentServiceId = new Property(8, String.class, "parentServiceId", false, "PARENT_SERVICE_ID");
        public final static Property MaintenanceMoney = new Property(9, String.class, "maintenanceMoney", false, "MAINTENANCE_MONEY");
        public final static Property MaintenanceId = new Property(10, int.class, "maintenanceId", false, "MAINTENANCE_ID");
        public final static Property MaintenanceTime = new Property(11, String.class, "maintenanceTime", false, "MAINTENANCE_TIME");
    }


    public ShopCarDataDao(DaoConfig config) {
        super(config);
    }
    
    public ShopCarDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP_CAR_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MONEY\" TEXT," + // 1: money
                "\"MONEY2\" TEXT," + // 2: money2
                "\"MONEY3\" TEXT," + // 3: money3
                "\"TEXT\" TEXT," + // 4: text
                "\"ICON\" TEXT," + // 5: icon
                "\"NUMBER\" TEXT," + // 6: number
                "\"SERVICE_ID\" TEXT," + // 7: serviceId
                "\"PARENT_SERVICE_ID\" TEXT," + // 8: parentServiceId
                "\"MAINTENANCE_MONEY\" TEXT," + // 9: maintenanceMoney
                "\"MAINTENANCE_ID\" INTEGER NOT NULL ," + // 10: maintenanceId
                "\"MAINTENANCE_TIME\" TEXT);"); // 11: maintenanceTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP_CAR_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShopCarData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(2, money);
        }
 
        String money2 = entity.getMoney2();
        if (money2 != null) {
            stmt.bindString(3, money2);
        }
 
        String money3 = entity.getMoney3();
        if (money3 != null) {
            stmt.bindString(4, money3);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(5, text);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(6, icon);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(7, number);
        }
 
        String serviceId = entity.getServiceId();
        if (serviceId != null) {
            stmt.bindString(8, serviceId);
        }
 
        String parentServiceId = entity.getParentServiceId();
        if (parentServiceId != null) {
            stmt.bindString(9, parentServiceId);
        }
 
        String maintenanceMoney = entity.getMaintenanceMoney();
        if (maintenanceMoney != null) {
            stmt.bindString(10, maintenanceMoney);
        }
        stmt.bindLong(11, entity.getMaintenanceId());
 
        String maintenanceTime = entity.getMaintenanceTime();
        if (maintenanceTime != null) {
            stmt.bindString(12, maintenanceTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShopCarData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(2, money);
        }
 
        String money2 = entity.getMoney2();
        if (money2 != null) {
            stmt.bindString(3, money2);
        }
 
        String money3 = entity.getMoney3();
        if (money3 != null) {
            stmt.bindString(4, money3);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(5, text);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(6, icon);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(7, number);
        }
 
        String serviceId = entity.getServiceId();
        if (serviceId != null) {
            stmt.bindString(8, serviceId);
        }
 
        String parentServiceId = entity.getParentServiceId();
        if (parentServiceId != null) {
            stmt.bindString(9, parentServiceId);
        }
 
        String maintenanceMoney = entity.getMaintenanceMoney();
        if (maintenanceMoney != null) {
            stmt.bindString(10, maintenanceMoney);
        }
        stmt.bindLong(11, entity.getMaintenanceId());
 
        String maintenanceTime = entity.getMaintenanceTime();
        if (maintenanceTime != null) {
            stmt.bindString(12, maintenanceTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShopCarData readEntity(Cursor cursor, int offset) {
        ShopCarData entity = new ShopCarData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // money
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // money2
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // money3
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // text
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // icon
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // number
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // serviceId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // parentServiceId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // maintenanceMoney
            cursor.getInt(offset + 10), // maintenanceId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // maintenanceTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShopCarData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMoney(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMoney2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMoney3(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setText(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIcon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setServiceId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setParentServiceId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMaintenanceMoney(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMaintenanceId(cursor.getInt(offset + 10));
        entity.setMaintenanceTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShopCarData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShopCarData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShopCarData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
