package com.xiaomai.zhuangba;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xiaomai.zhuangba.data.PushNotificationDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PUSH_NOTIFICATION_DB".
*/
public class PushNotificationDBDao extends AbstractDao<PushNotificationDB, Long> {

    public static final String TABLENAME = "PUSH_NOTIFICATION_DB";

    /**
     * Properties of entity PushNotificationDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Phone = new Property(1, String.class, "phone", false, "PHONE");
        public final static Property AliasType = new Property(2, String.class, "aliasType", false, "ALIAS_TYPE");
        public final static Property Alias = new Property(3, String.class, "alias", false, "ALIAS");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property Appkey = new Property(5, String.class, "appkey", false, "APPKEY");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property ProductionMode = new Property(7, String.class, "productionMode", false, "PRODUCTION_MODE");
        public final static Property Time = new Property(8, String.class, "time", false, "TIME");
        public final static Property DisplayType = new Property(9, String.class, "displayType", false, "DISPLAY_TYPE");
        public final static Property OrderCode = new Property(10, String.class, "orderCode", false, "ORDER_CODE");
        public final static Property OrderType = new Property(11, String.class, "orderType", false, "ORDER_TYPE");
        public final static Property AfterOpen = new Property(12, String.class, "afterOpen", false, "AFTER_OPEN");
        public final static Property Ticker = new Property(13, String.class, "ticker", false, "TICKER");
        public final static Property Text = new Property(14, String.class, "text", false, "TEXT");
        public final static Property Title = new Property(15, String.class, "title", false, "TITLE");
    }


    public PushNotificationDBDao(DaoConfig config) {
        super(config);
    }
    
    public PushNotificationDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PUSH_NOTIFICATION_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PHONE\" TEXT," + // 1: phone
                "\"ALIAS_TYPE\" TEXT," + // 2: aliasType
                "\"ALIAS\" TEXT," + // 3: alias
                "\"DESCRIPTION\" TEXT," + // 4: description
                "\"APPKEY\" TEXT," + // 5: appkey
                "\"TYPE\" TEXT," + // 6: type
                "\"PRODUCTION_MODE\" TEXT," + // 7: productionMode
                "\"TIME\" TEXT," + // 8: time
                "\"DISPLAY_TYPE\" TEXT," + // 9: displayType
                "\"ORDER_CODE\" TEXT," + // 10: orderCode
                "\"ORDER_TYPE\" TEXT," + // 11: orderType
                "\"AFTER_OPEN\" TEXT," + // 12: afterOpen
                "\"TICKER\" TEXT," + // 13: ticker
                "\"TEXT\" TEXT," + // 14: text
                "\"TITLE\" TEXT);"); // 15: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PUSH_NOTIFICATION_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PushNotificationDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String aliasType = entity.getAliasType();
        if (aliasType != null) {
            stmt.bindString(3, aliasType);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(4, alias);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        String appkey = entity.getAppkey();
        if (appkey != null) {
            stmt.bindString(6, appkey);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String productionMode = entity.getProductionMode();
        if (productionMode != null) {
            stmt.bindString(8, productionMode);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
 
        String displayType = entity.getDisplayType();
        if (displayType != null) {
            stmt.bindString(10, displayType);
        }
 
        String orderCode = entity.getOrderCode();
        if (orderCode != null) {
            stmt.bindString(11, orderCode);
        }
 
        String orderType = entity.getOrderType();
        if (orderType != null) {
            stmt.bindString(12, orderType);
        }
 
        String afterOpen = entity.getAfterOpen();
        if (afterOpen != null) {
            stmt.bindString(13, afterOpen);
        }
 
        String ticker = entity.getTicker();
        if (ticker != null) {
            stmt.bindString(14, ticker);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(15, text);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(16, title);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PushNotificationDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String aliasType = entity.getAliasType();
        if (aliasType != null) {
            stmt.bindString(3, aliasType);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(4, alias);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        String appkey = entity.getAppkey();
        if (appkey != null) {
            stmt.bindString(6, appkey);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String productionMode = entity.getProductionMode();
        if (productionMode != null) {
            stmt.bindString(8, productionMode);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
 
        String displayType = entity.getDisplayType();
        if (displayType != null) {
            stmt.bindString(10, displayType);
        }
 
        String orderCode = entity.getOrderCode();
        if (orderCode != null) {
            stmt.bindString(11, orderCode);
        }
 
        String orderType = entity.getOrderType();
        if (orderType != null) {
            stmt.bindString(12, orderType);
        }
 
        String afterOpen = entity.getAfterOpen();
        if (afterOpen != null) {
            stmt.bindString(13, afterOpen);
        }
 
        String ticker = entity.getTicker();
        if (ticker != null) {
            stmt.bindString(14, ticker);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(15, text);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(16, title);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PushNotificationDB readEntity(Cursor cursor, int offset) {
        PushNotificationDB entity = new PushNotificationDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // aliasType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // alias
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // appkey
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // productionMode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // displayType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // orderCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // orderType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // afterOpen
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ticker
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // text
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PushNotificationDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAliasType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlias(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAppkey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProductionMode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDisplayType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOrderCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOrderType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAfterOpen(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTicker(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setText(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTitle(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PushNotificationDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PushNotificationDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PushNotificationDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
