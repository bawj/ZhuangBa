package com.xiaomai.zhuangba;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xiaomai.zhuangba.data.bean.OrderServiceItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_SERVICE_ITEM".
*/
public class OrderServiceItemDao extends AbstractDao<OrderServiceItem, Long> {

    public static final String TABLENAME = "ORDER_SERVICE_ITEM";

    /**
     * Properties of entity OrderServiceItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderCode = new Property(1, String.class, "orderCode", false, "ORDER_CODE");
        public final static Property ServiceId = new Property(2, int.class, "serviceId", false, "SERVICE_ID");
        public final static Property ServiceText = new Property(3, String.class, "serviceText", false, "SERVICE_TEXT");
        public final static Property Number = new Property(4, int.class, "number", false, "NUMBER");
        public final static Property Amount = new Property(5, double.class, "amount", false, "AMOUNT");
        public final static Property Price2 = new Property(6, double.class, "price2", false, "PRICE2");
        public final static Property Price3 = new Property(7, double.class, "price3", false, "PRICE3");
        public final static Property IconUrl = new Property(8, String.class, "iconUrl", false, "ICON_URL");
        public final static Property ServiceStandard = new Property(9, String.class, "serviceStandard", false, "SERVICE_STANDARD");
        public final static Property Video = new Property(10, String.class, "video", false, "VIDEO");
        public final static Property SlottingStartLength = new Property(11, String.class, "slottingStartLength", false, "SLOTTING_START_LENGTH");
        public final static Property SlottingEndLength = new Property(12, String.class, "slottingEndLength", false, "SLOTTING_END_LENGTH");
        public final static Property Debugging = new Property(13, String.class, "debugging", false, "DEBUGGING");
        public final static Property MaterialsStartLength = new Property(14, String.class, "materialsStartLength", false, "MATERIALS_START_LENGTH");
        public final static Property MaterialsEndLength = new Property(15, String.class, "materialsEndLength", false, "MATERIALS_END_LENGTH");
        public final static Property MonthNumber = new Property(16, int.class, "monthNumber", false, "MONTH_NUMBER");
        public final static Property MaintenanceAmount = new Property(17, double.class, "maintenanceAmount", false, "MAINTENANCE_AMOUNT");
        public final static Property MaintenanceId = new Property(18, int.class, "maintenanceId", false, "MAINTENANCE_ID");
    }


    public OrderServiceItemDao(DaoConfig config) {
        super(config);
    }
    
    public OrderServiceItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_SERVICE_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER_CODE\" TEXT," + // 1: orderCode
                "\"SERVICE_ID\" INTEGER NOT NULL ," + // 2: serviceId
                "\"SERVICE_TEXT\" TEXT," + // 3: serviceText
                "\"NUMBER\" INTEGER NOT NULL ," + // 4: number
                "\"AMOUNT\" REAL NOT NULL ," + // 5: amount
                "\"PRICE2\" REAL NOT NULL ," + // 6: price2
                "\"PRICE3\" REAL NOT NULL ," + // 7: price3
                "\"ICON_URL\" TEXT," + // 8: iconUrl
                "\"SERVICE_STANDARD\" TEXT," + // 9: serviceStandard
                "\"VIDEO\" TEXT," + // 10: video
                "\"SLOTTING_START_LENGTH\" TEXT," + // 11: slottingStartLength
                "\"SLOTTING_END_LENGTH\" TEXT," + // 12: slottingEndLength
                "\"DEBUGGING\" TEXT," + // 13: debugging
                "\"MATERIALS_START_LENGTH\" TEXT," + // 14: materialsStartLength
                "\"MATERIALS_END_LENGTH\" TEXT," + // 15: materialsEndLength
                "\"MONTH_NUMBER\" INTEGER NOT NULL ," + // 16: monthNumber
                "\"MAINTENANCE_AMOUNT\" REAL NOT NULL ," + // 17: maintenanceAmount
                "\"MAINTENANCE_ID\" INTEGER NOT NULL );"); // 18: maintenanceId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_SERVICE_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderServiceItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderCode = entity.getOrderCode();
        if (orderCode != null) {
            stmt.bindString(2, orderCode);
        }
        stmt.bindLong(3, entity.getServiceId());
 
        String serviceText = entity.getServiceText();
        if (serviceText != null) {
            stmt.bindString(4, serviceText);
        }
        stmt.bindLong(5, entity.getNumber());
        stmt.bindDouble(6, entity.getAmount());
        stmt.bindDouble(7, entity.getPrice2());
        stmt.bindDouble(8, entity.getPrice3());
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(9, iconUrl);
        }
 
        String serviceStandard = entity.getServiceStandard();
        if (serviceStandard != null) {
            stmt.bindString(10, serviceStandard);
        }
 
        String video = entity.getVideo();
        if (video != null) {
            stmt.bindString(11, video);
        }
 
        String slottingStartLength = entity.getSlottingStartLength();
        if (slottingStartLength != null) {
            stmt.bindString(12, slottingStartLength);
        }
 
        String slottingEndLength = entity.getSlottingEndLength();
        if (slottingEndLength != null) {
            stmt.bindString(13, slottingEndLength);
        }
 
        String debugging = entity.getDebugging();
        if (debugging != null) {
            stmt.bindString(14, debugging);
        }
 
        String materialsStartLength = entity.getMaterialsStartLength();
        if (materialsStartLength != null) {
            stmt.bindString(15, materialsStartLength);
        }
 
        String materialsEndLength = entity.getMaterialsEndLength();
        if (materialsEndLength != null) {
            stmt.bindString(16, materialsEndLength);
        }
        stmt.bindLong(17, entity.getMonthNumber());
        stmt.bindDouble(18, entity.getMaintenanceAmount());
        stmt.bindLong(19, entity.getMaintenanceId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderServiceItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderCode = entity.getOrderCode();
        if (orderCode != null) {
            stmt.bindString(2, orderCode);
        }
        stmt.bindLong(3, entity.getServiceId());
 
        String serviceText = entity.getServiceText();
        if (serviceText != null) {
            stmt.bindString(4, serviceText);
        }
        stmt.bindLong(5, entity.getNumber());
        stmt.bindDouble(6, entity.getAmount());
        stmt.bindDouble(7, entity.getPrice2());
        stmt.bindDouble(8, entity.getPrice3());
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(9, iconUrl);
        }
 
        String serviceStandard = entity.getServiceStandard();
        if (serviceStandard != null) {
            stmt.bindString(10, serviceStandard);
        }
 
        String video = entity.getVideo();
        if (video != null) {
            stmt.bindString(11, video);
        }
 
        String slottingStartLength = entity.getSlottingStartLength();
        if (slottingStartLength != null) {
            stmt.bindString(12, slottingStartLength);
        }
 
        String slottingEndLength = entity.getSlottingEndLength();
        if (slottingEndLength != null) {
            stmt.bindString(13, slottingEndLength);
        }
 
        String debugging = entity.getDebugging();
        if (debugging != null) {
            stmt.bindString(14, debugging);
        }
 
        String materialsStartLength = entity.getMaterialsStartLength();
        if (materialsStartLength != null) {
            stmt.bindString(15, materialsStartLength);
        }
 
        String materialsEndLength = entity.getMaterialsEndLength();
        if (materialsEndLength != null) {
            stmt.bindString(16, materialsEndLength);
        }
        stmt.bindLong(17, entity.getMonthNumber());
        stmt.bindDouble(18, entity.getMaintenanceAmount());
        stmt.bindLong(19, entity.getMaintenanceId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OrderServiceItem readEntity(Cursor cursor, int offset) {
        OrderServiceItem entity = new OrderServiceItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderCode
            cursor.getInt(offset + 2), // serviceId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // serviceText
            cursor.getInt(offset + 4), // number
            cursor.getDouble(offset + 5), // amount
            cursor.getDouble(offset + 6), // price2
            cursor.getDouble(offset + 7), // price3
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // iconUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // serviceStandard
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // video
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // slottingStartLength
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // slottingEndLength
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // debugging
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // materialsStartLength
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // materialsEndLength
            cursor.getInt(offset + 16), // monthNumber
            cursor.getDouble(offset + 17), // maintenanceAmount
            cursor.getInt(offset + 18) // maintenanceId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderServiceItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setServiceId(cursor.getInt(offset + 2));
        entity.setServiceText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNumber(cursor.getInt(offset + 4));
        entity.setAmount(cursor.getDouble(offset + 5));
        entity.setPrice2(cursor.getDouble(offset + 6));
        entity.setPrice3(cursor.getDouble(offset + 7));
        entity.setIconUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setServiceStandard(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVideo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSlottingStartLength(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSlottingEndLength(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDebugging(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMaterialsStartLength(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMaterialsEndLength(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMonthNumber(cursor.getInt(offset + 16));
        entity.setMaintenanceAmount(cursor.getDouble(offset + 17));
        entity.setMaintenanceId(cursor.getInt(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrderServiceItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrderServiceItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrderServiceItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
