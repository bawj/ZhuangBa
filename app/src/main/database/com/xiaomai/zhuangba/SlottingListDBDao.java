package com.xiaomai.zhuangba;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xiaomai.zhuangba.data.bean.db.SlottingListDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SLOTTING_LIST_DB".
*/
public class SlottingListDBDao extends AbstractDao<SlottingListDB, Long> {

    public static final String TABLENAME = "SLOTTING_LIST_DB";

    /**
     * Properties of entity SlottingListDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SlottingId = new Property(1, int.class, "slottingId", false, "SLOTTING_ID");
        public final static Property StartLength = new Property(2, String.class, "startLength", false, "START_LENGTH");
        public final static Property EndLength = new Property(3, String.class, "endLength", false, "END_LENGTH");
        public final static Property SlottingPrice = new Property(4, double.class, "slottingPrice", false, "SLOTTING_PRICE");
        public final static Property IsCheck = new Property(5, boolean.class, "isCheck", false, "IS_CHECK");
    }


    public SlottingListDBDao(DaoConfig config) {
        super(config);
    }
    
    public SlottingListDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SLOTTING_LIST_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SLOTTING_ID\" INTEGER NOT NULL ," + // 1: slottingId
                "\"START_LENGTH\" TEXT," + // 2: startLength
                "\"END_LENGTH\" TEXT," + // 3: endLength
                "\"SLOTTING_PRICE\" REAL NOT NULL ," + // 4: slottingPrice
                "\"IS_CHECK\" INTEGER NOT NULL );"); // 5: isCheck
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SLOTTING_LIST_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SlottingListDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSlottingId());
 
        String startLength = entity.getStartLength();
        if (startLength != null) {
            stmt.bindString(3, startLength);
        }
 
        String endLength = entity.getEndLength();
        if (endLength != null) {
            stmt.bindString(4, endLength);
        }
        stmt.bindDouble(5, entity.getSlottingPrice());
        stmt.bindLong(6, entity.getIsCheck() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SlottingListDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSlottingId());
 
        String startLength = entity.getStartLength();
        if (startLength != null) {
            stmt.bindString(3, startLength);
        }
 
        String endLength = entity.getEndLength();
        if (endLength != null) {
            stmt.bindString(4, endLength);
        }
        stmt.bindDouble(5, entity.getSlottingPrice());
        stmt.bindLong(6, entity.getIsCheck() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SlottingListDB readEntity(Cursor cursor, int offset) {
        SlottingListDB entity = new SlottingListDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // slottingId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // startLength
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // endLength
            cursor.getDouble(offset + 4), // slottingPrice
            cursor.getShort(offset + 5) != 0 // isCheck
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SlottingListDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSlottingId(cursor.getInt(offset + 1));
        entity.setStartLength(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEndLength(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSlottingPrice(cursor.getDouble(offset + 4));
        entity.setIsCheck(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SlottingListDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SlottingListDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SlottingListDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
